module state_machine (
		input clock,reset,
		input [31:0] bu1,bu2,bu3,bu3,
		output [31:0] ndiag_out
	
	);

// parameter declarations
parameter BU1 = 2’b00; // state labels and state encoding
parameter BU2 = 2’b01;
parameter BU3 = 2’b10;
parameter BU4 = 2’b11;

// interal variables declaration section
reg [1:0] state, next_state;
reg ack, offline, online;

// clocked procedure with synchronous reset

always @ (posedge clock)
if (reset) // reset strategy
state <= BU1;
else
state <= next_state;

// combinational procedure with case statement and output logic
always @ (start or transmit or stop or wait or state)
begin
	next_state <= state; // default assignment to state and output variables
		case (state)
		BU1:
			begin
				ndiag_out <= bu1;
				if (diag_done) begin
					next_state <= BU2;
				end
			end
		BU2:
			begin
				ndiag_out <= bu2;
				if (diag_done) begin
					next_state <= BU3;
				end
			end
		BU3:
			begin
				ndiag_out <= bu3;
				if (diag_done) begin
					next_state <= BU4;
				end
			end
		BU4:
			begin
				ndiag_out <= bu4;
				if (diag_done) begin
					next_state <= BU1;
				end
			end
		endcase
end
endmodule